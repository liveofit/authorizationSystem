import { LoginDocument, LogoutDocument, RefreshTokenDocument } from '@graphql/autogenerated/hooks';
import { UserSessionPayload, userState } from '@graphql/cache/userState';
import { client } from '@graphql/client';
import { parseJwt } from '@utils/general/parseJwt';
import history from '@utils/Router/history';

export const getToken = async () => {
  console.log('gettingggg token');
  const user = userState.get();
  if (user.accessToken && user.refreshToken) {
    console.log('gettingggg token 1');
    const decodedAccessToken = parseJwt<UserSessionPayload>(user.accessToken as string);
    const decodedRefreshToken = parseJwt<UserSessionPayload>(user.refreshToken as string);
    if ((decodedAccessToken.exp || 0) * 1000 < Date.now()) {
      if ((decodedRefreshToken.exp || 0) * 1000 < Date.now()) {
        return history.push('/login');
      } else {
        console.log('heerreee');
        const result = await client.mutate({
          mutation: RefreshTokenDocument,
          variables: { refreshToken: user.refreshToken },
        });
        if (result.data?.refreshToken?.id) userState.set(result.data.refreshToken);
      }
    }
  }
  console.log('gettingggg token fin', user.accessToken);
  return user.accessToken;
};

export const login = async (username: string, password: string) => {
  try {
    const result = await client.mutate({
      mutation: LoginDocument,
      variables: { username, password },
    });
    userState.set(result.data.login);
    return result;
  } catch (err) {
    console.error(err);
    return null;
  }
};

export const logout = async () => {
  try {
    const result = await client.mutate({
      mutation: LogoutDocument,
    });
    userState.set({ id: '', accessToken: null, refreshToken: null });
    return result;
  } catch (err) {
    console.error(err);
    return null;
  }
};
